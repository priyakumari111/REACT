Products.js
import { Search, SentimentDissatisfied} from "@mui/icons-material";
import {
  CircularProgress,
  Grid,
  InputAdornment,
  TextField,
} from "@mui/material";
import { Box } from "@mui/system";
import axios from "axios";
import { useSnackbar } from "notistack";
import React, { useEffect, useState, useRef } from "react";
import { config } from "../App";
import Footer from "./Footer";
import Header from "./Header";
import "./Products.css";
import ProductCard from "./ProductCard";
//import filteredProducts from "@mui/icons-material";
// import Cart from './Cart';
// import generateCartItemsFrom from "./Cart"

// Definition of Data Structures used
/**
 * @typedef {Object} Product - Data on product available to buy
 * 
 * @property {string} name - The name or title of the product


/**
 * @typedef {Object} CartItem -  - Data on product added to cart
 * 
 * @property {string} name - The name or title of the product in cart
 * @property {string} qty - The quantity of product added to cart
 * @property {string} category - The category that the product belongs to
 * @property {number} cost - The price to buy the product
 * @property {number} rating - The aggregate rating of the product (integer out of five)
 * @property {string} image - Contains URL for the product image
 * @property {string} _id - Unique ID for the product
 */


const Products = () => {
  const token = localStorage.getItem("token");
  const { enqueueSnackbar } = useSnackbar();
  const [products, setProducts] = useState([]);
  const [searchProducts, setSearchProducts] = useState([]);
  const [waiting, setWaiting] = useState(false);
  const [searchKey,setSearchKey] = useState("");
  const [productFound, setProductFound] = useState(true);
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [productsCart,setProductsCart] = useState([]);
  const [loading, setLoading] = useState(true);
  // const [filteredProducts] = useState([]);
  const [items, setItems] = useState([]);
  const debounceTimeout = useRef(null);

  // TODO: CRIO_TASK_MODULE_PRODUCTS - Fetch products data and store it
  /**
   * Make API call to get the products list and store it to display the products
   *
   * @returns { Array.<Product> }
   *      Array of objects with complete data on all available products
   *
   * API endpoint - "GET /products"
   *
   * Example for successful response from backend:
   * HTTP 200
   * [
   *      {
   *          "name": "iPhone XR",
   *          "category": "Phones",
   *          "cost": 100,
   *          "rating": 4,
   *          "image": "https://i.imgur.com/lulqWzW.jpg",
   *          "_id": "v4sLtEcMpzabRyfx"
   *      },
   *      {
   *          "name": "Basketball",
   *          "category": "Sports",
   *          "cost": 100,
   *          "rating": 5,
   *          "image": "https://i.imgur.com/lulqWzW.jpg",
   *          "_id": "upLK9JbQ4rMhTwt4"
   *      }
   * ]
   *
   * Example for failed response from backend:
   * HTTP 500
   * {
   *      "success": false,
   *      "message": "Something went wrong. Check the backend console for more details"
   * }
   */
  const performAPICall = async (search) => {
    try{
      setWaiting(true);
      const response = search ? 
        await axios.get(`${config.endpoint}/products/search?value=${search}`) :
        await axios.get(`${config.endpoint}/products`);
      const data = response.data;
      setWaiting(false);
      setProductFound(true);
   //   console.log("Perform API call")
      if(!search) setSearchProducts(data);
      search ? setSearchProducts(data) : setProducts(data);
    }
    catch(e){
      setWaiting(false);
      if(e.response && e.response.status === 400){
       enqueueSnackbar(e.response.data.message, {
          variant: 'error'
        });
      }
      else{
        // setWaiting(false)
        setSearchProducts([]);
        setProductFound(false);
      }
    }
  };

  //clicking
  const generateCartItemsFrom = (cartData, productsData) => {
    if(!cartData) return ;
    const nextCart = cartData.map((item) => (
      {...item,
      ...productsData.find((product)=>item.productId === product._id)}
      ))
    return nextCart
  };

// const fetchCart = async (token) => {
//     if (!token) return;
//     try {
//       const response = await axios.get(`${config.endpoint}/cart`, {
//         headers: {
//           Authorization: `Bearer ${token}`,
//         },
//       });
//       return response.data;
//     } catch (e) {
//       enqueueSnackbar(
//         "Could not fetch cart details. Check that the backend is running, reachable and returns valid JSON",
//         {
//           variant: "error",
//         }
//       );
//       return null;
//     }
//   };



//   useEffect(() => {
//     fetchCart(token)
//       .then((cartData) => generateCartItemsFrom(cartData,products))
//       .then((cartItems) => {
//         setProductsCart(cartItems)});  
//   },[products])

  

  // TODO: CRIO_TASK_MODULE_PRODUCTS - Implement search logic
  /**
   * Definition for search handler
   * This is the function that is called on adding new search keys
   *
   * @param {string} text
   *    Text user types in the search bar. To filter the displayed products based on this text.
   *
   * @returns { Array.<Product> }
   *      Array of objects with complete data on filtered set of products
   *
   * API endpoint - "GET /products/search?value=<search-query>"
   *
   */
  const performSearch = async (text) => {
    performAPICall(text);
  };

  // TODO: CRIO_TASK_MODULE_PRODUCTS - Optimise API calls with debounce search implementation
  /**
   * Definition for debounce handler
   * With debounce, this is the function to be called whenever the user types text in the searchbar field
   *
   * @param {{ target: { value: string } }} event
   *    JS event object emitted from the search input field
   *
   * @param {NodeJS.Timeout} debounceTimeout
   *    Timer id set for the previous debounce call
   *
   */
  //Perform search with Debouncing
  const debounceSearch = (event) => {
    if (debounceTimeout.current){
      clearTimeout(debounceTimeout.current);
    }
    debounceTimeout.current = setTimeout(() => {
      performSearch(event.target.value);
    }, 500);
  };

  // Fetch products on intial load
  useEffect(() => {
    performAPICall("");
    checkLoggedIn();
  },[]);


  // useEffect(() => {
  //   performAPICall(searchKey);
  // },[searchKey])


  const checkLoggedIn = () => {
    if(localStorage.getItem("token")) setIsLoggedIn(true);
  };


  // const isItemCart = (productsCart,productId)=>{
  //   return productsCart.findIndex((item)=>item.productId === productId) !== -1
  // }

  const addToCart = async(token,productId,productsCart,quantity,addquantity) => {
    if(!token){
      enqueueSnackbar('Please log in to add item to cart',{variant: 'warning'})
      return;
    }
    if(!addquantity && productsCart.some((item) => item.productId === productId)){
      enqueueSnackbar('Item already in cart. Use the cart sidebar to update quantity or remove item.',
      {variant: 'warning'})
      return;
    }
    try{
      const response = await axios.post(`${config.endpoint}/cart`,
      {productId,qty:quantity},
      {headers:{Authorization : `Bearer ${token}`}}
      )
      // const cartItems = generateCartItemsFrom(response.data,products)
      setProductsCart(response.data)
    }
    catch(e){
        enqueueSnackbar('Could not fetch cart details. Check that the backend is running, reachable and returns valid JSON',
        {
          variant: 'error'
        });
      }
  };

  const handleLogout = () => {
    console.log("Logout button clicked");
   // localStorage.removeItem("token"); // Clear the token from local storage
    localStorage.clear();
    setIsLoggedIn(false); // Update the logged-in state
    setProductsCart([]); // Optionally clear the cart items
};
  

return (
  <div>
    <Header>
      <TextField
        className="search-desktop"
        size="small"
        style={{ width: "30%" }}
        InputProps={{
          endAdornment: (
            <InputAdornment position="end">
              <Search color="primary" />
            </InputAdornment>
          ),
        }}
        placeholder="Search for items/categories"
        name="search"
        onChange={debounceSearch}
      />
    </Header>

    <TextField
      className="search-mobile"
      size="small"
      fullWidth
      InputProps={{
        endAdornment: (
          <InputAdornment position="end">
            <Search color="primary" />
          </InputAdornment>
        ),
      }}
      placeholder="Search for items/categories"
      name="search"
      onChange={debounceSearch}
    />

    <Grid container>
      <Grid item xs md>
        <Grid item className="product-grid">
          <Box className="hero">
            <p className="hero-heading">
              India's <span className="hero-highlight">FASTEST DELIVERY</span> to your doorstep
            </p>
          </Box>
        </Grid>

        {waiting ? (
          <Box display="flex" flexDirection="column" alignItems="center" justifyContent="center">
            <CircularProgress size={25} />
            <h4>Loading Products...</h4>
          </Box>
        ) : searchProducts.length > 0 ? (
          <Grid container margin="1rem" padding="1rem" spacing={2}>
            {searchProducts.map((product) => (
              <Grid item xs={6} md={3} key={product._id}>
                <ProductCard
                  product={product}
                  handleAddToCart={() => addToCart(token, product._id, productsCart, 1, true)}
                />
              </Grid>
            ))}
          </Grid>
        ) : (
          <Box display="flex" flexDirection="column" alignItems="center" justifyContent="center" marginTop="2rem">
            <SentimentDissatisfied color="action" fontSize="large" />
            <h4 style={{ color: "#636363" }}>No products found</h4>
          </Box>
        )}
      </Grid>
    </Grid>
    <Footer />
  </div>
);
};

export default Products;
      />
        {/* TODO: CRIO_TASK_MODULE_CART - Display the Cart component */}
      <Footer />
    </div>
  );
};

export default Products;
*************************************************************************************

Product.css

.search {
  min-width: 24rem;
  position: relative;
  left: 4rem;
}

.hero {
  background-image: url("../assets/hero_image.png");
  background-position: center;
  background-repeat: no-repeat;
  background-size: cover;
  height: 10rem;
  display: flex;
  justify-content: center;
  align-items: center;
}

.product-grid {
  width: 100%;
}

.hero-heading {
  color: #fff;
  font-size: 1.5rem;
  width: 80%;
  position: relative;
  left: 1rem;
}

.hero-highlight {
  color: #212121;
  font-weight: 700;
  background: #ffb825;
  border-radius: 5px;
  padding: 0.2rem;
}

.loading {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  width: 100%;
  height: 50vh;
}

.search-mobile {
  display: block !important;
}

.search-desktop {
  display: none !important;
}

@media screen and (min-width: 768px) {
  .hero {
    justify-content: flex-end;
    height: 20rem;
    padding-right: 8rem;
  }
  .hero-heading {
    position: static;
    font-size: 3rem;
    width: 50%;
  }
  .search-mobile {
    display: none !important;
  }
  .search-desktop {
    display: block !important;
  }
}
********************************************************************************
ProductCard.js
import { AddShoppingCartOutlined } from "@mui/icons-material";
import {
  Button,
  Card,
  CardActions,
  CardContent,
  CardMedia,
  Rating,
  Typography,
} from "@mui/material";
import React from "react";
import "./ProductCard.css";

const ProductCard = ({ product, handleAddToCart }) => {

  return (
    <Card className="card">
      <CardMedia
        component="img"
        height="200"
        image={product.image}
        alt={product.name}
      />
      <CardContent>
        <Typography gutterBottom variant="subtitle2" component="div">
            {product.name}
        </Typography>
        <Typography gutterBottom variant="subtitle2" component="div">
            {`$${product.cost}`}
        </Typography>
        <Rating name="read-only" value={product.rating} readOnly /> 
      </CardContent>
      <CardActions>
        <Button 
          variant="contained" 
          size="large"
          fullWidth 
          onClick ={() => handleAddToCart(product._id)} 
          startIcon={<AddShoppingCartOutlined />}
        >
          ADD TO CART
        </Button>
      </CardActions>

    </Card>
  );
};

export default ProductCard;
****************************************************************************
ProductCard.css
.card {
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
}

.card-actions {
    margin-bottom: 1rem;
}

.card-button {
    text-transform: none;
    font-weight: 600;
}
