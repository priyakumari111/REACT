Login.js

import { Button, CircularProgress, Stack, TextField } from "@mui/material";
import { Box } from "@mui/system";
import axios from "axios";
import { useSnackbar } from "notistack";
import React, { useState } from "react";
import { useHistory, Link } from "react-router-dom";
import { config } from "../App";
import Footer from "./Footer";
import Header from "./Header";
import "./Login.css";

const Login = () => {
  const { enqueueSnackbar } = useSnackbar();

  const history = useHistory();

  const [formData, setFormData] = useState({
    username: '',
    password: ''
  })

  const handleChange = e => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    })
  }

  if (localStorage.getItem('token')){
    history.push('/')
  }
  // TODO: CRIO_TASK_MODULE_LOGIN - Fetch the API response
  /**
   * Perform the Login API call
   * @param {{ username: string, password: string }} formData
   *  Object with values of username, password and confirm password user entered to register
   *
   * API endpoint - "POST /auth/login"
   *
   * Example for successful response from backend:
   * HTTP 201
   * {
   *      "success": true,
   *      "token": "testtoken",
   *      "username": "criodo",
   *      "balance": 5000
   * }
   *
   * Example for failed response from backend:
   * HTTP 400
   * {
   *      "success": false,
   *      "message": "Password is incorrect"
   * }
   *
   */

  
  const login = async (formData) => {
    if (validateInput(formData)){
      try{
        const response = await axios.post(
          `${config.endpoint}/auth/login`,
          formData
        );

      //  console.log('>>', response)
      persistLogin(
        response.data.token,
        response.data.username,
        response.data.balance
      );

      enqueueSnackbar("Logged in successfully", {variant: "success"});
      history.push('/')

      }catch(e){
        if (e.response && e.response.status ===400){
          enqueueSnackbar(e.response.data.message, { variant: "error"});
          
        }else {
          enqueueSnackbar(
            "Something went wrong. Check that the backend is running, reachable and returns valid JSON.",
            {
              variant: "error",
            }
          );
        }
      }
    }
  };

  // TODO: CRIO_TASK_MODULE_LOGIN - Validate the input
  /**
   * Validate the input values so that any bad or illegal values are not passed to the backend.
   *
   * @param {{ username: string, password: string }} data
   *  Object with values of username, password and confirm password user entered to register
   *
   * @returns {boolean}
   *    Whether validation has passed or not
   *
   * Return false and show warning message if any validation condition fails, otherwise return true.
   * (NOTE: The error messages to be shown for each of these cases, are given with them)
   * -    Check that username field is not an empty value - "Username is a required field"
   * -    Check that password field is not an empty value - "Password is a required field"
   */
  const validateInput = (data) => {
    if (!data.username) {
      enqueueSnackbar("Username is a required field", { variant: "error" });
      return false;
    }
    if (!data.password) {
      enqueueSnackbar("Password is a required field", { variant: "error" });
      return false;
    }
    return true;
 };

  // TODO: CRIO_TASK_MODULE_LOGIN - Persist user's login information
  /**
   * Store the login information so that it can be used to identify the user in subsequent API calls
   *
   * @param {string} token
   *    API token used for authentication of requests after logging in
   * @param {string} username
   *    Username of the logged in user
   * @param {string} balance
   *    Wallet balance amount of the logged in user
   *
   * Make use of localStorage: https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage
   * -    `token` field in localStorage can be used to store the Oauth token
   * -    `username` field in localStorage can be used to store the username that the user is logged in as
   * -    `balance` field in localStorage can be used to store the balance amount in the user's wallet
   */
  const persistLogin = (token, username, balance) => {
    localStorage.setItem('token', token);
    localStorage.setItem('username', username);
    localStorage.setItem('balance', balance);

  }
    

  return (
    <Box
      display="flex"
      flexDirection="column"
      justifyContent="space-between"
      minHeight="100vh"
    >
      <Header hasHiddenAuthButtons/>
      <Box className="content">
        <Stack spacing={2} className="form">
        <h2 className="title">Login</h2>
          <TextField
            id="username"
            label="Username"
            variant="outlined"
            name="username"
            placeholder="Enter Username"
            fullWidth
            value={formData.username}
            onChange={handleChange}
          />
          <TextField
            id="password"
            variant="outlined"
            label="Password"
            name="password"
            type="password"
           // helperText="Password must be at least 6 characters long"
            fullWidth
            placeholder="Enter a password with minimum 6 characters"
            value={formData.password}
            onChange={handleChange}
          />
         
          {/* {registerationInProgress ? <Box display="flex" justifyContent="center" alignItems="center">
            <CircularProgress size={25} color="primary" />
          </Box>} */}
          <Button className="button" variant="contained"
          onClick={() => {
            login(formData)
          }}>
            Login to QKart
          </Button>
          <p className="secondary-action">
            Don't have an account?{" "}
            <Link to="/register">
              Register now
            </Link>
          </p>
        </Stack>
      </Box>
      <Footer />
    </Box>
  );
};

export default Login;
************************************************************************************************************

login.css

.content {
    background-image: url("../assets/hero_image.png");
    background-position: center;
    background-repeat: no-repeat;
    background-size: cover;
    display: flex;
    justify-content: center;
    height: 70vh;
}

.form {
    background-color: white;
    border-radius: 10px;
    padding: 2rem;
    min-width: 80%;
    margin: 2rem;
    box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.2);
}

.title {
    color: #00a278;
}

.secondary-action {
    padding: 1rem 0;
}

.link {
    font-weight: 700;
    text-decoration: none;
}

.link:focus {
    color: #00a278;
}

.link:active {
    color: #45c09f;
}

.link:visited {
    color: #45c09f;
}

.button {
    background-color: #00a278 !important;
}

.button:hover {
    background-color: #00845c !important;
}

@media screen and (min-width: 768px) {
    .content {
        justify-content: flex-end;
    }
    .form {
        min-width: 24rem;
    }
}

************************************************************************************************
App.js

import Register from "./components/Register";
import ipConfig from "./ipConfig.json";
import {Route,Switch} from "react-router-dom";
import Login from"./components/Login";
import Products from"./components/Products";
//import Checkout from"./components/Checkout";
//import Thanks from"./components/Thanks";
//import React from 'react';


export const config = {
  endpoint: `http://${ipConfig.workspaceIp}:8082/api/v1`,
};

function App(){
  return (
    <div className="App">
      {/*TODO: CRIO_TASK_MODULE_LOGIN-To add configure routes */}
      <Switch>
        <Route path="/register">
          <Register />
        </Route>
        <Route path="/login">
          <Login />
        </Route>
        <Route path="/">
          <Products />
        </Route>
      </Switch>
    </div>
  )
}


export default App;

***************************************************************************************************
