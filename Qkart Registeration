Register.js

import { Button, CircularProgress, Stack, TextField } from "@mui/material";
import { Box } from "@mui/system";
import axios from "axios";
import { useSnackbar } from "notistack";
import React, { useState } from "react";
import { config } from "../App";
import Footer from "./Footer";
import Header from "./Header";
import {useHistory, Link } from "react-router-dom";
import "./Register.css";

const Register = () => {
  const { enqueueSnackbar } = useSnackbar();
  const history = useHistory();

  const [registerationInProgress, setRegisterationInProgress] = useState(false);
  const [formData, setFormData] = useState({
    username: '',
    password: '',
    confirmPassword: ''
  });

  const handleChange = e => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
  };

  const register = async (formData) => {
    if (validateInput(formData)){
      try{
        setRegisterationInProgress(true)
        await axios.post(`${config.endpoint}/auth/register`, {
          username: formData.username,
          password: formData.password
        })
        enqueueSnackbar("Registered Successfully", { variant: "success"});
        history.push('/login')
 //       setRegisterationInProgress(false)
      }catch(e) {
        if (e.response && e.response.data.message){
          enqueueSnackbar(
            e.response.data.message, 
            { variant: "error" }
          );
        }else{
          enqueueSnackbar("Something went wrong. Check that the backend is running, reachable and returns valid JSON.", { variant: "error"
        });

        }
 //       setRegisterationInProgress(false)

      } finally {
        setRegisterationInProgress(false)
      }


    }
  };

  const validateInput = (data) => {
    if (data.username === '') {
      enqueueSnackbar("Username is a required field", { variant: "warning" });
      return false;
    }
    if (data.username.length < 6) {
      enqueueSnackbar("Username must be at least 6 characters", { variant: "warning" });
      return false;
    }
    if (data.password === '') {
      enqueueSnackbar("Password is a required field", { variant: "warning" });
      return false;
    }
    if (data.password.length < 6) {
      enqueueSnackbar("Password must be at least 6 characters", { variant: "warning" });
      return false;
    }
    if (data.password !== data.confirmPassword) {
      enqueueSnackbar("Passwords do not match", { variant: "warning" });
      return false;
    }
    return true;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (validateInput(formData)) {
      register(formData);
    }
  };

  return (
    <Box
      display="flex"
      flexDirection="column"
      justifyContent="space-between"
      minHeight="100vh"
    >
      <Header hasHiddenAuthButtons />
      <Box className="content">
        <Stack spacing={2} className="form">
          <h2 className="title">Register</h2>
          <TextField
            id="username"
            label="Username"
            variant="outlined"
            title="Username"
            name="username"
            placeholder="Enter Username"
            fullWidth
            value={formData.username}
            onChange={handleChange}
          />
          <TextField
            id="password"
            variant="outlined"
            label="Password"
            name="password"
            type="password"
            helperText="Password must be at least 6 characters length"
            fullWidth
            placeholder="Enter a password with minimum 6 characters"
            value={formData.password}
            onChange={handleChange}
          />
          <TextField
            id="confirmPassword"
            variant="outlined"
            label="Confirm Password"
            name="confirmPassword"
            type="password"
            fullWidth
            value={formData.confirmPassword}
            onChange={handleChange}
          />
          <div>
            {registerationInProgress ? (
              <Box display="flex" justifyContent="center" alignItems="center">
                <CircularProgress size={25} color="primary" />
              </Box>
            ) : (
              <Button
                className="button"
                variant="contained"
                onClick={() => {
                  register(formData);
                }}
              >
                Register Now
              </Button>
            )}
            <p className="secondary-action">
              Already have an account?{" "}
              <Link to="/login">
                Login here
              </Link>
            </p>
          </div>
        </Stack>
      </Box>
      <Footer />
    </Box>
  );
};

export default Register;
***********************************************************************************************
Register.css

.content {
  background-image: url("../assets/hero_image.png");
  background-position: center;
  background-repeat: no-repeat;
  background-size: cover;
  display: flex;
  justify-content: center;
  align-items: center;
  height: 70vh;
}

.form {
  background-color: white;
  border-radius: 10px;
  padding: 2rem;
  min-width: 80%;
  margin: 2rem;
  box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.2);
}

.title {
  color: #00a278;
}

.secondary-action {
  padding: 1rem 0;
}

.link {
  font-weight: 700;
  text-decoration: none;
  color: #45c09f;
}

.link:focus {
  color: #00a278;
}

.link:active {
  color: #45c09f;
}

.link:visited {
  color: #45c09f;
}

.button {
    background-color: #00a278 !important;
}

.button:hover {
    background-color: #00845c !important;
}

@media screen and (min-width: 768px) {
  .form {
    min-width: 24rem;
  }
  content {
    justify-content: flex-end;
  }
}
*******************************************************************************************************************


App.js


import Register from "./components/Register";
import ipConfig from "./ipConfig.json";

export const config = {
  //// Construct the API endpoint using the workspace IP from ipConfig.json
  endpoint: `http://${ipConfig.workspaceIp}:8082/api/v1`,
};

function App() {
  return (
    <div className="App">
          <Register />
    </div>
  );
}

export default App;
